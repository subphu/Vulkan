#version 450
#define pi 3.14159265358979323846

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set=0, binding=0) buffer outputBuffer { vec4 imageData[]; };

layout(push_constant) uniform pushConstants {
    uint width, height;
    float n;
};

const float PI = 3.141592653589793;
const int bands = 5;
const float f1 = 0.5; // 1st reflection
const float f2 = 1.0; // 2nd reflection
const float n1 = 1.0; // refraction index air
const float n2 = 1.5; // refraction index oil

float refractionAngle(float n1, float theta1, float n2) {
    float sin2 = n1 * sin(theta1) / n2;
    float theta2 = asin(sin2);
    return theta2;
}

vec2 snellLaw(float lambda, float opd) {
    float m   = (opd/lambda) * 2.0 * PI;
    return vec2(cos(m), sin(m));
}

float getOPD(float d, float theta, float n) {
    return n * 2.0 * d * cos(theta);
}

float power(vec2 l) {
    return dot(l, l);
}

float interference(float wavelength, float delta, float opd) {

    float tot = 0.0;
    for (int i=-bands ; i<=bands ; i++) {
        float idx = float(i)/float(bands);
        float lambda = wavelength + delta * idx;
        
        vec2  l = vec2(0); // light/phase
        float f = 1.0;     // alpha

        // 1st, distance = 0  , shift = PI
        l += -snellLaw(lambda, 0.) * f * f1;
        f *= 1.0-f1;

        // 2nd, distance = 2*h, shift = 0
        l += +snellLaw(lambda, opd) * f * f2;
        f *= 1.0-f2;

        float sensitivity = cos(idx * PI)+1.0;
        tot += sensitivity * power(l) / float(bands*2+1);
    }
    return tot;
}

vec3 measure(float d, float angle) {
    float theta = refractionAngle(n1, angle, n2);
    float opd   = getOPD(d, theta, n2);
    return vec3(
        interference(650e-9, 60e-9, opd),
        interference(532e-9, 40e-9, opd),
        interference(441e-9, 30e-9, opd)
    );
}

void main() {
    uint xi = gl_GlobalInvocationID.x;
    uint yi = gl_GlobalInvocationID.y;

    if(xi >= width || yi >= height) return;
    
    float xf = float(xi) / float(width);
    float yf = float(yi) / float(height);
    vec2  uv = vec2(xf, yf);

    float thickness  = 4e-6 * uv.y;
    float angle      = PI/2 * uv.x;

    vec3 col = measure(thickness, angle);

    uint idx = yi * width + xi;
    imageData[idx] = vec4(col, 1.0);
}
